MODULE main
VAR
	demP : boolean;
	demQ : boolean;
	-- le booléen est là pour différencier les processus pour éviter l'interblocage
	procP : process user(demP, demQ, FALSE);
	procQ : process user(demP, demQ, TRUE);

ASSIGN
init(demP) := FALSE;
init(demQ) := FALSE;

-- P1 : exclusion mutuelle garantie
SPEC
AG !(procP.state = critical & procQ.state = critical)

-- P2 : tout proc demandant accès à la SC finira (forcément) par l'obtenir
SPEC
AG (procP.state = asking -> AF (procP.state = critical) & procQ.state = asking -> AF (procQ.state = critical))

-- P3 : tout proc demandant accès à la SC pourra (potentiellement) l'obtenir
SPEC
AG (procP.state = asking -> EF procP.state = critical & procQ.state = asking -> EF procQ.state = critical)

-- P4 : l'ordre d'accès à la SC respecte l'ordre des demandes d'accès
SPEC
AG ( (procP.state = asking & AX AF procQ.state = asking & (procQ.state = idle | procQ.state = exiting)) -> AF(A[procQ.state != critical U procP.state = critical]) & (procQ.state = asking & AX AF procP.state = asking & (procP.state = idle | procP.state = exiting)) -> AF(A[procP.state != critical U procQ.state = critical]))


MODULE user(demP, demQ, i)
VAR
	state : {idle, asking, critical, exiting};

ASSIGN
init(state) := idle;

next(state) :=
case
	state = idle : asking;
	state = asking & !i & !demQ : critical; -- on est dans procP (!i) et procQ ne demande pas l'accès critique (!demQ)
	state = asking & i & !demP : critical;  -- on est dans procQ (i) et procP ne demande pas l'accès critique (!demP)
	state = critical : {critical, exiting};
	state = exiting: idle;
	TRUE : state;
esac;

next(demP) :=
case
	state = idle & !i : TRUE; -- au début de la boucle, on initialise à TRUE
	state = exiting & !i: FALSE; -- quand on sort de la section critique, on repasse à FALSE
	TRUE : demP; -- dans tous les autres cas (asking et critical, ou un autre proc) on ne change pas demP 
esac;

-- même procédé pour demQ, seul l'identifiant i change
next(demQ) :=
case
	state = idle & i : TRUE;
	state = exiting & i: FALSE;
	TRUE : demQ;
esac;
